---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  modelPath = 'http://localhost:4321/src/assets/images/logo_ephoreal.glb',

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <!-- 3D Logo Background Container -->
  <div class="absolute inset-0 pointer-events-none z-0">
    <div id="hero-logo3d-container" class="w-full h-full">
      <canvas id="hero-logo3d-canvas" class="w-full h-full opacity-30"></canvas>
    </div>
  </div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 z-10">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 relative z-10"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300 relative z-10" set:html={subtitle} />}
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 relative z-10">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div>
        {
          image && (
            <div class="relative m-auto max-w-5xl z-10">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-md w-full"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={1024}
                  height={576}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>

  <!-- Three.js Script for 3D Logo -->
  <script type="importmap">
    {
      "imports": {
        "three": "https://unpkg.com/three@0.166.1/build/three.module.js",
        "three/addons/": "https://unpkg.com/three@0.166.1/examples/jsm/"
      }
    }
  </script>
  <script type="module" define:vars={{ modelPath }}>
    import * as THREE from 'three';
    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

    let heroLogo3DInitialized = false;
    let heroLogo3DRenderer = null;
    let heroLogo3DScene = null;
    let heroLogo3DAnimationId = null;
    let heroLogo3DModel = null;

    function cleanupHeroLogo3D() {
      if (heroLogo3DAnimationId) {
        cancelAnimationFrame(heroLogo3DAnimationId);
        heroLogo3DAnimationId = null;
      }
      if (heroLogo3DRenderer) {
        heroLogo3DRenderer.dispose();
        heroLogo3DRenderer = null;
      }
      if (heroLogo3DScene) {
        heroLogo3DScene.clear();
        heroLogo3DScene = null;
      }
      heroLogo3DModel = null;
      heroLogo3DInitialized = false;
    }

    function initHeroLogo3D() {
      console.log('Initializing 3D logo with modelPath:', modelPath);
      const container = document.getElementById('hero-logo3d-container');
      const canvas = document.getElementById('hero-logo3d-canvas');
      
      if (!container || !canvas) {
        console.error('Container or canvas not found');
        return;
      }

      // Clean up any existing instance
      cleanupHeroLogo3D();
      heroLogo3DInitialized = true;

      // 1. SCENE SETUP
      heroLogo3DScene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      heroLogo3DRenderer = new THREE.WebGLRenderer({
        canvas: canvas,
        antialias: true,
        alpha: true 
      });
      heroLogo3DRenderer.setSize(window.innerWidth, window.innerHeight);
      heroLogo3DRenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      heroLogo3DRenderer.outputColorSpace = THREE.SRGBColorSpace;
      
      // Add environment map for metallic reflections
      const pmremGenerator = new THREE.PMREMGenerator(heroLogo3DRenderer);
      const envTexture = pmremGenerator.fromScene(new THREE.Scene()).texture;
      heroLogo3DScene.environment = envTexture;
      heroLogo3DScene.background = null;

      // LIGHTING
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.3);
      heroLogo3DScene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
      directionalLight.position.set(0, 5, 5);
      heroLogo3DScene.add(directionalLight);

      const pointLight1 = new THREE.PointLight(0xffffff, 0.9);
      pointLight1.position.set(-3, 2, 3);
      heroLogo3DScene.add(pointLight1);

      const pointLight2 = new THREE.PointLight(0xffffff, 0.9);
      pointLight2.position.set(3, -2, -3);
      heroLogo3DScene.add(pointLight2);

      const rimLight = new THREE.DirectionalLight(0xffffff, 0.9);
      rimLight.position.set(-2, 0, -5);
      heroLogo3DScene.add(rimLight);

      // LOAD GLB MODEL
      console.log('Loading GLB model from:', modelPath);
      const loader = new GLTFLoader();
      loader.load(
        modelPath,
        function (gltf) {
          if (!heroLogo3DInitialized) return;

          heroLogo3DModel = gltf.scene;

          // âœ… Enhanced metallic material here
          heroLogo3DModel.traverse((child) => {
            if (child.isMesh) {
              child.material = new THREE.MeshPhysicalMaterial({
                color: 0xaaaaaa,
                metalness: 1.0,
                roughness: 0.25,
                envMap: envTexture,
                envMapIntensity: 1.2,
                clearcoat: 1.0,
                clearcoatRoughness: 0.05,
                reflectivity: 0.5
              });
              child.castShadow = true;
              child.receiveShadow = true;
            }
          });

          // Center and scale model
          const box = new THREE.Box3().setFromObject(heroLogo3DModel);
          const center = box.getCenter(new THREE.Vector3());
          const size = box.getSize(new THREE.Vector3());
          heroLogo3DModel.position.sub(center);
          const maxDim = Math.max(size.x, size.y, size.z);
          const scale = 8 / maxDim;
          heroLogo3DModel.scale.setScalar(scale);
          heroLogo3DModel.position.z = -5;
          heroLogo3DScene.add(heroLogo3DModel);

          console.log('Hero 3D Logo loaded successfully');
        },
        function (progress) {
          console.log('Hero logo loading progress:', (progress.loaded / progress.total * 100) + '%');
        },
        function (error) {
          console.error('Error loading hero 3D logo:', error);
        }
      );

      // CAMERA POSITION
      camera.position.set(0, 0, 12);

      // ANIMATION LOOP
      function animate() {
        if (!heroLogo3DInitialized) return;
        heroLogo3DAnimationId = requestAnimationFrame(animate);
        if (heroLogo3DModel) {
          heroLogo3DModel.rotation.y += 0.01;
        }
        if (heroLogo3DRenderer && heroLogo3DScene) {
          heroLogo3DRenderer.render(heroLogo3DScene, camera);
        }
      }
      animate();

      // RESIZE HANDLER
      function handleResize() {
        if (!heroLogo3DRenderer || !heroLogo3DInitialized) return;
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        heroLogo3DRenderer.setSize(window.innerWidth, window.innerHeight);
      }

      window.addEventListener('resize', handleResize);
      handleResize();
    }

    function setupHeroLogo3DInit() {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initHeroLogo3D);
      } else {
        initHeroLogo3D();
      }
    }

    setupHeroLogo3DInit();
    
    // Handle Astro View Transitions using global coordination
    function handleNavigation() {
      cleanupHeroLogo3D();
      // Use global coordination system to prevent conflicts
      if (window.astro3DComponents) {
        window.astro3DComponents.scheduleInit('heroLogo3D', () => {
          if (document.getElementById('hero-logo3d-container') && document.getElementById('hero-logo3d-canvas')) {
            initHeroLogo3D();
          }
        });
      } else {
        // Fallback if global system not available
        setTimeout(() => {
          if (document.getElementById('hero-logo3d-container') && document.getElementById('hero-logo3d-canvas')) {
            initHeroLogo3D();
          }
        }, 250);
      }
    }

    document.addEventListener('astro:before-swap', cleanupHeroLogo3D);
    document.addEventListener('astro:after-swap', handleNavigation);
    
    // Also handle page load events for better reliability
    document.addEventListener('DOMContentLoaded', () => {
      if (!heroLogo3DInitialized) {
        initHeroLogo3D();
      }
    });
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', cleanupHeroLogo3D);
  </script>
</section>
