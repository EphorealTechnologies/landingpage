---
import { Icon } from 'astro-icon/components';
import type { Brands as Props } from '~/types';

import Image from '~/components/common/Image.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
const {
  title = '',
  subtitle = '',
  tagline = '',
  icons = [],
  images = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <!-- 3D Logo Cloud Container -->
  <div id="logo-cloud-container" class="w-full h-96 relative">
    <canvas id="logo-cloud-canvas" class="w-full h-full"></canvas>
  </div>

  <!-- Three.js Script -->
  <script type="importmap">
    {
      "imports": {
        "three": "https://unpkg.com/three@0.166.1/build/three.module.js",
        "three/addons/": "https://unpkg.com/three@0.166.1/examples/jsm/"
      }
    }
  </script>
  <script type="module">
    import * as THREE from 'three';
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

    let logoCloudInitialized = false;
    let logoRenderer = null;
    let logoScene = null;
    let logoControls = null;
    let logoAnimationId = null;

    function cleanupLogoCloud() {
      if (logoAnimationId) {
        cancelAnimationFrame(logoAnimationId);
        logoAnimationId = null;
      }
      if (logoControls) {
        logoControls.dispose();
        logoControls = null;
      }
      if (logoRenderer) {
        logoRenderer.dispose();
        logoRenderer = null;
      }
      if (logoScene) {
        logoScene.clear();
        logoScene = null;
      }
      logoCloudInitialized = false;
    }

    function initLogoCloud() {
      const container = document.getElementById('logo-cloud-container');
      const canvas = document.getElementById('logo-cloud-canvas');
      
      if (!container || !canvas) return;

      // Clean up any existing instance
      cleanupLogoCloud();
      logoCloudInitialized = true;

      // 1. SCENE SETUP
      logoScene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
      logoRenderer = new THREE.WebGLRenderer({
        canvas: canvas,
        antialias: true,
        alpha: true 
      });
      logoRenderer.setSize(container.clientWidth, container.clientHeight);
      logoRenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

      // 2. INITIALIZE ORBIT CONTROLS
      logoControls = new OrbitControls(camera, logoRenderer.domElement);
      logoControls.enableDamping = true;
      logoControls.dampingFactor = 0.05;
      logoControls.minDistance = 5;
      logoControls.maxDistance = 20;
      logoControls.autoRotate = true;
      logoControls.autoRotateSpeed = 1.5;
      logoControls.enableZoom = false; // Disable zooming/scrolling

      // 3. LOGO DATA
      const logos = [
        { src: 'https://upload.wikimedia.org/wikipedia/commons/2/2d/Tensorflow_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/1/10/PyTorch_logo_icon.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/9/93/Amazon_Web_Services_Logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/5/51/Google_Cloud_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Microsoft_Azure.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/6/63/Databricks_Logo.png' },
        { src: 'https://upload.wikimedia.org/wikipedia/en/f/f4/Docker_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/6/67/Kubernetes_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/f/f3/Apache_Spark_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/0/05/Scikit_learn_logo_small.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/3/38/Jupyter_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/d/de/AirflowLogo.png' },
        { src: 'https://avatars.githubusercontent.com/u/39938107?s=200&v=4' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/3/38/Prometheus_software_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/7/73/Amazon-Redshift-Logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/2/29/Postgresql_elephant.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/5/5e/Cassandra_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/7/70/Apache_Flink_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/a/a1/Grafana_logo.svg' },
        { src: 'https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg' }
      ];

      // 4. CREATE THE LOGO CLOUD
      const logoCloud = new THREE.Group();
      const textureLoader = new THREE.TextureLoader();
      const radius = 5;
      const totalLogos = logos.length;
      const phi = Math.PI * (Math.sqrt(5) - 1);

      for (let i = 0; i < totalLogos; i++) {
        const y = 1 - (i / (totalLogos - 1)) * 2;
        const radiusAtY = Math.sqrt(1 - y * y);
        const theta = phi * i;
        const x = Math.cos(theta) * radiusAtY;
        const z = Math.sin(theta) * radiusAtY;
        
        const geometry = new THREE.PlaneGeometry(1, 1);
        const material = new THREE.MeshBasicMaterial({ side: THREE.DoubleSide, transparent: true });
        const mesh = new THREE.Mesh(geometry, material);

        textureLoader.load(logos[i].src, (texture) => {
          if (!logoCloudInitialized) return; // Skip if component was cleaned up
          mesh.material.map = texture;
          const aspectRatio = texture.image.width / texture.image.height;
          mesh.scale.set(aspectRatio, 1, 1);
          mesh.material.needsUpdate = true;
        });

        mesh.position.set(x * radius, y * radius, z * radius);
        mesh.lookAt(new THREE.Vector3(0, 0, 0));
        logoCloud.add(mesh);
      }
      logoScene.add(logoCloud);

      // 5. SET CAMERA POSITION
      camera.position.z = 5;

      // 6. ANIMATION LOOP
      function animate() {
        if (!logoCloudInitialized) return; // Stop animation if cleaned up
        
        logoAnimationId = requestAnimationFrame(animate);
        if (logoControls) logoControls.update();
        if (logoRenderer && logoScene) logoRenderer.render(logoScene, camera);
      }
      animate();

      // 7. HANDLE WINDOW RESIZING
      function handleResize() {
        if (!logoRenderer || !logoCloudInitialized) return;
        
        const width = container.clientWidth;
        const height = container.clientHeight;
        
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        logoRenderer.setSize(width, height);
      }

      window.addEventListener('resize', handleResize);
      
      // Initial resize call
      handleResize();
    }

    // Initialize logo cloud
    function setupLogoInit() {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initLogoCloud);
      } else {
        initLogoCloud();
      }
    }

    // Setup initial logo cloud
    setupLogoInit();

    // Handle Astro View Transitions - improved timing and cleanup
    function handleNavigation() {
      cleanupLogoCloud();
      // Longer timeout and ensure DOM is ready
      setTimeout(() => {
        if (document.getElementById('logo-cloud-container') && document.getElementById('logo-cloud-canvas')) {
          initLogoCloud();
        }
      }, 250);
    }

    document.addEventListener('astro:before-swap', cleanupLogoCloud);
    document.addEventListener('astro:after-swap', handleNavigation);
    
    // Also handle page load events for better reliability
    document.addEventListener('DOMContentLoaded', () => {
      if (!logoCloudInitialized) {
        initLogoCloud();
      }
    });
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', cleanupLogoCloud);
  </script>
</WidgetWrapper>
