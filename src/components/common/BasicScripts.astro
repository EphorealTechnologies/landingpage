---
import { UI } from 'astrowind:config';
---

<script is:inline define:vars={{ defaultTheme: UI.theme }}>
  if (window.basic_script) {
    return;
  }

  window.basic_script = true;

  // Global 3D components coordination
  window.astro3DComponents = window.astro3DComponents || {
    isNavigating: false,
    pendingInits: new Set(),
    
    scheduleInit: function(componentName, initFn) {
      this.pendingInits.add({ name: componentName, init: initFn });
      if (!this.isNavigating) {
        this.executePendingInits();
      }
    },
    
    executePendingInits: function() {
      const inits = Array.from(this.pendingInits);
      this.pendingInits.clear();
      inits.forEach(({ init }) => {
        try {
          init();
        } catch (error) {
          console.error('Failed to initialize 3D component:', error);
        }
      });
    },
    
    startNavigation: function() {
      this.isNavigating = true;
    },
    
    endNavigation: function() {
      this.isNavigating = false;
      setTimeout(() => this.executePendingInits(), 300);
    }
  };

  // Handle global navigation state
  document.addEventListener('astro:before-swap', () => {
    window.astro3DComponents.startNavigation();
  });
  
  document.addEventListener('astro:after-swap', () => {
    window.astro3DComponents.endNavigation();
  });

  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  const initTheme = function () {
    if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
      applyTheme(defaultTheme.replace(':only', ''));
    } else if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      applyTheme('dark');
    } else {
      applyTheme('light');
    }
  };
  initTheme();

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), false);
      });
    }
  }

  const onLoad = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('#header nav', 'click', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.getElementById('header')?.classList.toggle('expanded');
      document.getElementById('header')?.classList.toggle('bg-page');
      document.querySelector('#header nav')?.classList.toggle('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) {
        return;
      }
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    const screenSize = window.matchMedia('(max-width: 767px)');
    screenSize.addEventListener('change', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    function applyHeaderStylesOnScroll() {
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (!header) return;
      if (lastKnownScrollPosition > 60 && !header.classList.contains('scroll')) {
        header.classList.add('scroll');
      } else if (lastKnownScrollPosition <= 60 && header.classList.contains('scroll')) {
        header.classList.remove('scroll');
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };
  const onPageShow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.getElementById('header')?.classList.remove('expanded');
    document.querySelector('#header nav')?.classList.add('hidden');
  };

  window.onload = onLoad;
  window.onpageshow = onPageShow;

  document.addEventListener('astro:after-swap', () => {
    initTheme();
    onLoad();
    onPageShow();
  });

  // Stars Background Initialization
  let starsInitialized = false;
  let animationId = null;
  let starsScene = null;
  let starsRenderer = null;

  function cleanupStars() {
    if (animationId) {
      cancelAnimationFrame(animationId);
      animationId = null;
    }
    if (starsRenderer) {
      starsRenderer.dispose();
      starsRenderer = null;
    }
    if (starsScene) {
      starsScene.clear();
      starsScene = null;
    }
    starsInitialized = false;
  }

  function initStars() {
    const container = document.getElementById('stars-background');
    const canvas = document.getElementById('stars-canvas');
    
    if (!container || !canvas) return;
    
    // Clean up any existing stars instance
    cleanupStars();
    
    starsInitialized = true;

    // Import Three.js dynamically
    import('https://unpkg.com/three@0.166.1/build/three.module.js').then((THREE) => {
      // 1. SCENE SETUP
      starsScene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
      starsRenderer = new THREE.WebGLRenderer({
        canvas: canvas,
        antialias: true,
        alpha: true 
      });
      starsRenderer.setSize(window.innerWidth, window.innerHeight);
      starsRenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      starsRenderer.setClearColor(0x000000, 0);

      // 2. CREATE STARS
      const starsGroup = new THREE.Group();
      const starGeometry = new THREE.SphereGeometry(.1, 5, 5);
      
      // Create 1000 stars
      for (let i = 0; i < 1000; i++) {
        const starMaterial = new THREE.MeshBasicMaterial({ 
          color: 0xFFFFFF,
          transparent: true,
          opacity: 0.95
        });
        
        const star = new THREE.Mesh(starGeometry, starMaterial);
        
        // Position stars in a sphere around the observer
        const radius = 60 + Math.random() * 80;
        const theta = Math.random() * Math.PI * 2;
        const phi = Math.acos(2 * Math.random() - 1);
        
        star.position.set(
          radius * Math.sin(phi) * Math.cos(theta),
          radius * Math.cos(phi),
          radius * Math.sin(phi) * Math.sin(theta)
        );
        
        star.userData = {
          radius: radius,
          theta: theta,
          phi: phi,
          rotationSpeed: 0.0002 + Math.random() * 0.0003
        };
        
        starsGroup.add(star);
      }
      
      starsScene.add(starsGroup);
      camera.position.z = 20;

      // 3. ANIMATION LOOP
      function animate() {
        if (!starsInitialized) return; // Stop animation if cleaned up
        
        animationId = requestAnimationFrame(animate);
        
        const diagonalAxis = new THREE.Vector3(1, 0, 1).normalize();
        starsGroup.rotateOnAxis(diagonalAxis, 0.0005);
        
        starsGroup.children.forEach((star) => {
          star.lookAt(camera.position);
          const distance = star.position.distanceTo(camera.position);
          const scale = distance / 80;
          star.scale.set(scale, scale, scale);
        });
        
        if (starsRenderer && starsScene) {
          starsRenderer.render(starsScene, camera);
        }
      }
      animate();

      // 4. HANDLE WINDOW RESIZING
      function handleResize() {
        if (!starsRenderer || !starsInitialized) return;
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        starsRenderer.setSize(window.innerWidth, window.innerHeight);
      }
      window.addEventListener('resize', handleResize);
      handleResize();
    }).catch(error => {
      console.error('Failed to load Three.js for stars:', error);
    });
  }

  // Initialize stars on page load and navigation
  function setupStarsInit() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initStars);
    } else {
      initStars();
    }
  }

  // Setup initial stars
  setupStarsInit();

  // Clean up and reinitialize on page navigation - improved timing and cleanup
  function handleStarsNavigation() {
    cleanupStars();
    // Longer timeout and ensure DOM is ready
    setTimeout(() => {
      if (document.getElementById('stars-background') && document.getElementById('stars-canvas')) {
        initStars();
      }
    }, 250);
  }

  document.addEventListener('astro:before-swap', cleanupStars);
  document.addEventListener('astro:after-swap', handleStarsNavigation);
  
  // Also handle page load events for better reliability
  document.addEventListener('DOMContentLoaded', () => {
    if (!starsInitialized) {
      initStars();
    }
  });
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', cleanupStars);
</script>
